Oto systematyczny plan refaktoryzacji z listą szczegółowych promptów dla każdego modułu:

### 1. Inicjalizacja Projektu Modularnego
Zadanie: Przygotowanie struktury projektu rtaspi-modular

1. Struktura katalogów:
```
rtaspi-modular/
├── pyproject.toml         # Główna konfiguracja projektu
├── setup.py               # Konfiguracja instalacji
├── README.md              # Dokumentacja projektu
├── rtaspi-core/           # Rdzeń systemu
├── rtaspi-devices/        # Zarządzanie urządzeniami
├── rtaspi-streaming/      # Obsługa strumieni
├── rtaspi-processing/     # Przetwarzanie mediów
├── rtaspi-web/            # Interfejs webowy
├── rtaspi-cli/            # Interfejs wiersza poleceń
└── rtaspi-integration/    # Integracje zewnętrzne
```


3. Cele inicjalizacji:
- Przygotowanie struktury projektu
- Konfiguracja zależności między modułami
- Zapewnienie możliwości rozwoju

Wytyczne:
- Użyj najnowszych praktyk setuptools
- Zachowaj kompatybilność wsteczną
- Przygotuj dokumentację
```


### 3. Refaktoryzacja Urządzeń (rtaspi-devices)
```
Zadanie: Migracja komponentów zarządzania urządzeniami

Komponenty do migracji:
- LocalDevicesManager
- NetworkDevicesManager
- Mechanizmy odkrywania urządzeń
- Klasy protokołów

Struktura katalogów:
```
rtaspi-devices/
├── pyproject.toml
├── README.md
└── rtaspi_devices/
    ├── __init__.py
    ├── base/
    │   ├── __init__.py
    │   └── device.py
    ├── local/
    │   ├── __init__.py
    │   └── manager.py
    ├── network/
    │   ├── __init__.py
    │   └── manager.py
    ├── discovery/
    │   ├── __init__.py
    │   ├── local.py
    │   └── network.py
    └── protocols/
        ├── __init__.py
        └── base.py
```

Kluczowe zadania:
1. Abstrakcyjna klasa bazowa Device
2. Mechanizmy odkrywania urządzeń
3. Wsparcie dla różnych protokołów
4. Zdarzeniowy model komunikacji

Wytyczne:
- Użyj enum do zarządzania stanami
- Zaimplementuj interfejs protokołów
- Wprowadź mechanizm pluginów dla odkrywania
- Zachowaj istniejącą logikę z src/rtaspi/device_managers/
```

### 4. Refaktoryzacja Strumieniowania (rtaspi-streaming)
```
Zadanie: Migracja komponentów strumieniowania

Komponenty do migracji:
- Protokoły (RTSP, RTMP, WebRTC)
- Menedżer strumieni
- Klasy obsługi wyjść

Struktura katalogów:
```
rtaspi-streaming/
├── pyproject.toml
├── README.md
└── rtaspi_streaming/
    ├── __init__.py
    ├── base/
    │   ├── __init__.py
    │   └── stream.py
    ├── protocols/
    │   ├── __init__.py
    │   ├── rtsp.py
    │   ├── rtmp.py
    │   └── webrtc.py
    ├── manager/
    │   ├── __init__.py
    │   └── stream_manager.py
    └── output/
        ├── __init__.py
        └── handlers.py
```

Kluczowe wymagania:
1. Abstrakcyjny interfejs protokołów
2. Zarządzanie cyklem życia strumieni
3. Wsparcie dla wielu protokołów
4. Wydajne przetwarzanie mediów

Wytyczne:
- Wprowadź bazową klasę Stream
- Zaimplementuj fabrykę protokołów
- Dodaj mechanizmy monitorowania stanu strumieni
- Zachowaj implementacje z src/rtaspi/streaming/
```

### 5. Refaktoryzacja Przetwarzania (rtaspi-processing)
```
Zadanie: Migracja komponentów przetwarzania mediów

Komponenty do migracji:
- Filtry wideo
- Filtry audio
- Detekcja obiektów
- Rozpoznawanie mowy
- Executor potoków

Struktura katalogów:
```
rtaspi-processing/
├── pyproject.toml
├── README.md
└── rtaspi_processing/
    ├── __init__.py
    ├── base/
    │   ├── __init__.py
    │   └── pipeline.py
    ├── video/
    │   ├── __init__.py
    │   ├── filters.py
    │   └── detection.py
    ├── audio/
    │   ├── __init__.py
    │   ├── filters.py
    │   └── recognition.py
    └── executor/
        ├── __init__.py
        └── pipeline_executor.py
```

Kluczowe wymagania:
1. Potokowy model przetwarzania
2. Wsparcie dla różnych typów mediów
3. Rozszerzalność filtrów
4. Wydajne przetwarzanie

Wytyczne:
- Wprowadź abstrakcyjną klasę Filter
- Zaimplementuj builder dla potoków
- Dodaj mechanizmy asynchronicznego przetwarzania
- Zachowaj implementacje z src/rtaspi/processing/
```

### 6. Refaktoryzacja Web (rtaspi-web)
```
Zadanie: Migracja komponentów webowych

Komponenty do migracji:
- Serwer WWW
- Endpointy API
- Interfejs webowy
- Obsługa WebSocket

Struktura katalogów:
```
rtaspi-web/
├── pyproject.toml
├── README.md
└── rtaspi_web/
    ├── __init__.py
    ├── server/
    │   ├── __init__.py
    │   └── main.py
    ├── api/
    │   ├── __init__.py
    │   ├── devices.py
    │   ├── streams.py
    │   └── processing.py
    ├── websocket/
    │   ├── __init__.py
    │   └── handler.py
    └── interface/
        ├── __init__.py
        └── routes.py
```

Kluczowe wymagania:
1. Obsługa RESTful API
2. Zarządzanie WebSocket
3. Routing interfejsu
4. Bezpieczeństwo komunikacji

Wytyczne:
- Użyj FastAPI lub Flask
- Zaimplementuj autoryzację
- Dodaj obsługę CORS
- Zachowaj implementacje z src/rtaspi/web/
```

### 7. Refaktoryzacja CLI (rtaspi-cli)
```
Zadanie: Migracja komponentów CLI

Komponenty do migracji:
- Komendy zarządzania
- Interfejs interaktywny
- Obsługa konfiguracji

Struktura katalogów:
```
rtaspi-cli/
├── pyproject.toml
├── README.md
└── rtaspi_cli/
    ├── __init__.py
    ├── main.py
    ├── commands/
    │   ├── __init__.py
    │   ├── devices.py
    │   ├── streams.py
    │   └── processing.py
    └── utils/
        ├── __init__.py
        └── output.py
```

Kluczowe wymagania:
1. Intuicyjny interfejs
2. Wsparcie dla wszystkich funkcji systemu
3. Rozszerzalność komend
4. Przyjazne formatowanie wyjścia

Wytyczne:
- Użyj Click lub Typer
- Wprowadź bazową klasę dla komend
- Zaimplementuj dynamiczne ładowanie komend
- Zachowaj implementacje z src/rtaspi/cli/
```

### 8. Refaktoryzacja Integracji (rtaspi-integration)
```
Zadanie: Migracja komponentów integracji

Komponenty do migracji:
- Reguły automatyzacji
- Wyzwalacze zdarzeń
- Akcje
- Integracje z systemami zewnętrznymi

Struktura katalogów:
```
rtaspi-integration/
├── pyproject.toml
├── README.md
└── rtaspi_integration/
    ├── __init__.py
    ├── rules/
    │   ├── __init__.py
    │   └── engine.py
    ├── triggers/
    │   ├── __init__.py
    │   └── base.py
    ├── actions/
    │   ├── __init__.py
    │   └── base.py
    └── connectors/
        ├── __init__.py
        ├── mqtt.py
        └── home_assistant.py
```

Kluczowe wymagania:
1. Silnik reguł
2. Mechanizmy wyzwalaczy
3. Definicje akcji
4. Integracje z systemami IoT

Wytyczne:
- Wprowadź abstrakcyjną klasę dla reguł
- Zaimplementuj mechanizm oceny warunków
- Dodaj wsparcie dla wielu źródeł zdarzeń
- Zachowaj implementacje z src/rtaspi/automation/
```

### Strategia Migracji

1. **Kolejność Migracji**:
- Rdzeń systemu (rtaspi-core)
- Moduł urządzeń (rtaspi-devices)
- Streaming (rtaspi-streaming)
- Przetwarzanie (rtaspi-processing)
- Web (rtaspi-web)
- CLI (rtaspi-cli)
- Integracja (rtaspi-integration)

2. **Kluczowe Zasady**:
- Zachowanie kompatybilności wstecznej
- Stopniowe wprowadzanie nowych komponentów
- Ciągłe testowanie
- Minimalizacja zmian w istniejącym kodzie




Zadania do realizacji:

1. Przegląd katalogów i plików w src/rtaspi/device_managers/
2. Identyfikacja kluczowych klas i interfejsów
3. Mapowanie zależności między komponentami
4. Określenie wzorców projektowych

1. Mechanizmy odkrywania urządzeń:
- Lokalne skanowanie
- Odkrywanie sieciowe
- Wsparcie dla wielu protokołów
- Konfigurowalność procesu odkrywania

2. Kluczowe komponenty:
- Interfejs skanera
- Mechanizmy filtrowania
- Obsługa różnych źródeł
- Zarządzanie cyklem życia odkrywania

3. Wymagania projektowe:
- Asynchroniczność
- Wydajność skanowania
- Minimalizacja obciążenia systemu
- Możliwość rozszerzania

oczekiwana struktura katalogów w rtaspi-modular/
rtaspi-devices/
├── pyproject.toml
├── README.md
├── docs/
│   ├── index.md
│   ├── device_types.md
│   ├── discovery.md
│   └── protocols.md
├── examples/
│   ├── basic_discovery/
│   ├── advanced_discovery/
│   └── protocol_support/
└── rtaspi_devices/
    ├── __init__.py
    ├── base/
    │   ├── device.py
    │   └── manager.py
    ├── local/
    │   ├── scanner.py
    │   └── handlers.py
    ├── network/
    │   ├── discovery.py
    │   └── protocols.py
    ├── types/
    │   ├── camera.py
    │   ├── microphone.py
    │   └── generic.py
    └── utils/
        ├── state.py
        └── discovery.py

Zadania do realizacji:

1. Mechanizmy odkrywania urządzeń:
- Lokalne skanowanie
- Odkrywanie sieciowe
- Wsparcie dla wielu protokołów
- Konfigurowalność procesu odkrywania

2. Kluczowe komponenty:
- Interfejs skanera
- Mechanizmy filtrowania
- Obsługa różnych źródeł
- Zarządzanie cyklem życia odkrywania

3. Wymagania projektowe:
- Asynchroniczność
- Wydajność skanowania
- Minimalizacja obciążenia systemu
- Możliwość rozszerzania


Zadania do realizacji:

1. Abstrakcja protokołów komunikacji:
- Interfejs protokołu
- Wsparcie dla różnych standardów
- Mechanizmy autentykacji
- Obsługa błędów

2. Kluczowe protokoły:
- V4L2
- ONVIF
- RTSP
- WebRTC
- Protokoły przemysłowe

3. Wymagania projektowe:
- Rozszerzalność
- Bezpieczeństwo
- Minimal coupling
- Łatwa integracja




---



